define("mod_polyteam/polyteam",["exports","https://cdn.jsdelivr.net/npm/d3@7"],(function(_exports,d3){function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.displayTeams=void 0,d3=function(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}(d3);_exports.displayTeams=()=>{const dataDiv=document.getElementById("generatedteams"),strings=JSON.parse(dataDiv.dataset.strings),generatedTeamsRaw=JSON.parse(dataDiv.dataset.generatedteams),allCognitiveModes=JSON.parse(dataDiv.dataset.allcognitivemodes),generatedTeams=[allCognitiveModes.reduce(((obj,mode)=>(obj[mode]=1/allCognitiveModes.length*100,obj)),{}),...generatedTeamsRaw.map((team=>{const counter=team.cognitive_modes_counter,cognitiveModesCount=Object.entries(counter).reduce(((sum,_ref)=>{let[_,modeCount]=_ref;return sum+modeCount}),0);return allCognitiveModes.reduce(((obj,mode)=>(obj[mode]=0===cognitiveModesCount?0:counter[mode]/cognitiveModesCount*100,obj)),{})}))],matchingStrategies=["ideal",...new Set(generatedTeamsRaw.map((team=>team.matching_strategy)))],parentWidth=document.getElementById("polyteamgeneratedteams").getBoundingClientRect().width,margin_top=50,margin_right=50,margin_bottom=50,margin_left=50,width=parentWidth-margin_left-margin_right,height=400-margin_top-margin_bottom;let svg=d3.select("#polyteamgeneratedteams").append("svg").attr("width",width+margin_left+margin_right).attr("height",height+margin_top+margin_bottom).append("g").attr("transform","translate("+margin_left+","+margin_top+")");const markersColors=d3.scaleOrdinal().domain(matchingStrategies).range(d3.schemeDark2),legend=svg.selectAll(".legend").data(matchingStrategies).enter().append("g").attr("class","legend");legend.append("rect").attr("x",20).attr("y",4).attr("width",12).attr("height",12).attr("fill","none").attr("stroke-width",1.5).style("stroke",(d=>markersColors(d))),legend.append("text").attr("x",40).attr("y",10).attr("dy",".35em").text((d=>strings[d])).style("fill",(d=>markersColors(d)));const legendItems=document.querySelectorAll(".legend");let totalWidth=0;legendItems.forEach((function(item){totalWidth+=item.getBBox().width}));const startX=(width-totalWidth-20*(matchingStrategies.length-1))/2;let previousWidth=0;legend.attr("transform",(function(d,i){previousWidth+=0===i?0:legendItems[i-1].getBBox().width;return"translate("+(startX+previousWidth+20*i)+", ".concat(.75*-margin_top,")")}));const labels=generatedTeams.map(((_,index)=>0===index?strings.ideal:"".concat(index))),x=d3.scaleBand().domain(labels).range([0,width]).padding([.2]);svg.append("g").attr("transform","translate(0,"+height+")").call(d3.axisBottom(x).tickSizeOuter(0)),svg.append("text").attr("text-anchor","end").attr("x",(width+margin_left+margin_right)/2).attr("y",height+.75*margin_bottom).attr("font-size","medium").text(strings.teams);let yLeft=d3.scaleLinear().domain([0,100]).range([height,0]);svg.append("g").call(d3.axisLeft(yLeft)),svg.append("text").attr("text-anchor","middle").attr("transform","rotate(-90)").attr("y",.75*-margin_left).attr("x",-height/2).attr("font-size","medium").text(strings.cognitivemodesproportions);const cognitiveVariances=[0,...generatedTeamsRaw.map((t=>t.cognitive_variance))];let yRight=d3.scaleLinear().domain([0,Math.max(12,Math.max(...cognitiveVariances)+1)]).range([height,0]);svg.append("g").attr("transform","translate(".concat(width,", 0)")).call(d3.axisRight(yRight)),svg.append("text").attr("text-anchor","middle").attr("transform","rotate(-90)").attr("y",width+.75*margin_left).attr("x",-height/2).attr("font-size","medium").text(strings.standarddeviation);let color=d3.scaleOrdinal().domain(allCognitiveModes).range(["#1F77B4","#FF7F0E","#2CA02C","#D62728","#9467BD","#8C564B","#E377C2","#7F7F7F"]),stackedData=d3.stack().keys(allCognitiveModes)(generatedTeams);svg.append("g").selectAll("g").data(stackedData).enter().append("g").attr("fill",(d=>color(d.key))).selectAll("rect").data((d=>d)).enter().append("rect").attr("x",((_,i)=>x(labels[i]))).attr("y",(d=>yLeft(d[1]))).attr("height",(d=>yLeft(d[0])-yLeft(d[1]))).attr("width",x.bandwidth()),svg.append("g").selectAll("rect").data(generatedTeams).enter().append("rect").attr("stroke",((_,i)=>markersColors(0===i?"ideal":generatedTeamsRaw[i-1].matching_strategy))).attr("stroke-width",1.5).attr("fill","none").attr("x",((_,i)=>x(labels[i]))).attr("y",yLeft(100)).attr("height",yLeft(0)-yLeft(100)).attr("width",x.bandwidth()),svg.append("g").selectAll("g").data(allCognitiveModes).enter().append("text").text((d=>strings[d])).attr("text-anchor","middle").attr("dominant-baseline","middle").attr("alignment-baseline","middle").attr("x",x(labels[0])+x.bandwidth()/2).attr("y",((_,i)=>(yLeft(stackedData[i][0][0])+yLeft(stackedData[i][0][1]))/2)).attr("font-weight","bold").attr("font-size","".concat(Math.min(x.bandwidth()/2,35),"px")).attr("fill","white"),svg.append("g").selectAll("rect").data(generatedTeams.map(((data,index)=>({data:data,index:index})))).enter().filter(((_ref2,i)=>{let{data:data}=_ref2;return i>0&&Object.values(data).every((v=>0===v))})).append("text").text(strings.nocognitivemodedata).attr("transform","rotate(90)").attr("text-anchor","middle").attr("dominant-baseline","middle").attr("x",(_ref3=>{let{index:index}=_ref3;return x(labels[index])+x.bandwidth()/2})).attr("y",(yLeft(0)+yLeft(100))/2).attr("font-size","small").attr("fill","black").style("opacity",.5).each((function(){const bbox=this.getBBox(),cx=bbox.x+bbox.width/2,cy=bbox.y+bbox.height/2;d3.select(this).attr("transform","rotate(-90,"+cx+","+cy+")")})),svg.append("g").selectAll("dot").data(cognitiveVariances.map(((d,i)=>({index:i,data:d})))).enter().filter(((_,i)=>0===i||"randommatchingwithnocognitivemode"!==generatedTeamsRaw[i-1].matching_strategy)).append("circle").attr("cx",(d=>x(labels[d.index])+x.bandwidth()/2)).attr("cy",(d=>yRight(d.data))).attr("r",Math.min(5,.45*x.bandwidth())).style("fill","black")}}));

//# sourceMappingURL=polyteam.min.js.map