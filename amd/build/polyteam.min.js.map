{"version":3,"file":"polyteam.min.js","sources":["../src/polyteam.js"],"sourcesContent":["import * as d3 from \"https://cdn.jsdelivr.net/npm/d3@7\";\n\n// TODO : Remove disable\n/* eslint-disable no-console */\n\nexport const displayTeams = () => {\n\n    const generatedTeamsDiv = document.getElementById(\"generatedteams\");\n    let cognitiveModes = [\"EF\", \"EN\", \"ES\", \"ET\", \"IF\", \"IN\", \"IS\", \"IT\"];\n    const generatedTeamsRaw = JSON.parse(generatedTeamsDiv.dataset.generatedteams);\n    const generatedTeams = [\n        cognitiveModes.reduce((obj, mode) => {\n            obj[mode] = 1 / cognitiveModes.length * 100;\n            return obj;\n        }, {}),\n        ...generatedTeamsRaw.map(team => {\n            const counter = team['cognitive_modes_counter'];\n            const cognitiveModesCount = Object.entries(counter)\n                /* eslint-disable-next-line no-unused-vars */\n                .reduce((sum, [_, modeCount]) => sum + modeCount, 0);\n            return cognitiveModes.reduce((obj, mode) => {\n                obj[mode] = counter[mode] / cognitiveModesCount * 100;\n                return obj;\n            }, {});\n        })\n    ];\n\n    // Stacked bar chart inspired from https://d3-graph-gallery.com/graph/barplot_stacked_basicWide.html\n\n    // Declare the chart dimensions and margins.\n    // set the dimensions and margins of the graph\n    const parentWidth = document.getElementById(\"polyteamgeneratedteams\").getBoundingClientRect().width;\n    // const barsWidth = Math.min(\n    //     1000,\n    //     Math.max(600, 25 * generatedTeams.length + (cognitiveModes.length - 1) * 5)\n    // );\n    const margin = {top: 10, right: 50, bottom: 50, left: 50},\n        width = parentWidth - margin.left - margin.right, // TODO: Adjust width with bars\n        height = 400 - margin.top - margin.bottom;\n\n    // append the svg object to the body of the page\n    let svg = d3.select(\"#polyteamgeneratedteams\")\n        .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\",\n            \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\n    // TODO : Internationalisation\n    const labels = generatedTeams.map((_, index) => index === 0 ? \"Ideal\" : `${index}`);\n\n    // Add X axis\n    let x = d3.scaleBand()\n        .domain(labels)\n        .range([0, width])\n        .padding([0.2]);\n    svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x).tickSizeOuter(0));\n\n    // Add X axis label:\n    svg.append(\"text\")\n        .attr(\"text-anchor\", \"end\")\n        .attr(\"x\", (width + margin.left + margin.right) / 2)\n        .attr(\"y\", height + margin.bottom * 0.75)\n        .attr(\"font-size\", \"medium\")\n        .text(\"Teams\"); // TODO: Internationalization\n\n    // Add Y left axis\n    let yLeft = d3.scaleLinear()\n        .domain([0, 100])\n        .range([height, 0]);\n    svg.append(\"g\")\n        .call(d3.axisLeft(yLeft));\n\n    // Y left axis label:\n    svg.append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", -margin.left * 0.75)\n        .attr(\"x\", -height / 2)\n        .attr(\"font-size\", \"medium\")\n        .text(\"Cognitive variances (%)\"); // TODO: Internationalization\n\n    // Add Y right axis\n    const cognitiveVariances = [\n        0,\n        ...generatedTeamsRaw.map(t => t[\"cognitive_variance\"])\n    ];\n    let yRight = d3.scaleLinear()\n        .domain([0, Math.max(12, Math.max(...cognitiveVariances) + 1)])\n        .range([height, 0]);\n    svg.append(\"g\")\n        .attr(\"transform\", `translate(${width}, 0)`)\n        .call(d3.axisRight(yRight));\n\n    // Y right axis label:\n    svg.append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", width + margin.left * 0.75)\n        .attr(\"x\", -height / 2)\n        .attr(\"font-size\", \"medium\")\n        .text(\"Standard deviation (markers)\"); // TODO: Internationalization\n\n    // color palette = one color per subgroup\n    let color = d3.scaleOrdinal()\n        .domain(cognitiveModes)\n        .range(['#1F77B4', '#FF7F0E', '#2CA02C', '#D62728', '#9467BD', '#8C564B', '#E377C2', '#7F7F7F']);\n\n    // stack the data? --> stack per subgroup\n    let stackedData = d3.stack().keys(cognitiveModes)(generatedTeams);\n\n    // Show the bars\n    svg.append(\"g\")\n        .selectAll(\"g\")\n        // Enter the stack data = loop key per key = group per group\n        .data(stackedData)\n        .enter().append(\"g\")\n        .attr(\"fill\", function (d) {\n            return color(d.key);\n        })\n        .selectAll(\"rect\")\n        // enter a second time = loop subgroup per subgroup to add all rectangles\n        .data(function (d) {\n            return d;\n        })\n        .enter()\n        .append(\"rect\")\n        .attr(\"x\", function (d, i) {\n            return x(labels[i]);\n        })\n        .attr(\"y\", function (d) {\n            return yLeft(d[1]);\n        })\n        .attr(\"height\", function (d) {\n            return yLeft(d[0]) - yLeft(d[1]);\n        })\n        .attr(\"width\", x.bandwidth());\n\n    svg.append(\"g\")\n        .selectAll(\"g\")\n        // Enter the stack data = loop key per key = group per group\n        .data(cognitiveModes)\n        .enter()\n        .append(\"text\")\n        .text(function (d) {\n            return d;\n        })\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"dominant-baseline\", \"middle\")\n        .attr(\"alignment-baseline\", \"middle\")\n        .attr(\"x\", function () {\n            return x(labels[0]) + x.bandwidth() / 2;\n        })\n        .attr(\"y\", function (_, i) {\n            return (yLeft(stackedData[i][0][0]) + yLeft(stackedData[i][0][1])) / 2;\n        })\n        .attr(\"font-weight\", \"bold\")\n        .attr(\"font-size\", `${Math.min(x.bandwidth() / 2, 35)}px`)\n        .attr(\"fill\", \"white\");\n\n    svg.append(\"g\")\n        .selectAll(\"dot\")\n        // Enter the stack data = loop key per key = group per group\n        .data(cognitiveVariances)\n        .enter()\n        .append(\"circle\")\n        .attr(\"cx\", function (_, i) {\n            return x(labels[i]) + x.bandwidth() / 2;\n        })\n        .attr(\"cy\", function (d) {\n            return yRight(d);\n        })\n        .attr(\"r\", Math.min(5, x.bandwidth() * 0.45))\n        .style(\"fill\", \"black\");\n\n};\n"],"names":["generatedTeamsDiv","document","getElementById","cognitiveModes","generatedTeamsRaw","JSON","parse","dataset","generatedteams","generatedTeams","reduce","obj","mode","length","map","team","counter","cognitiveModesCount","Object","entries","sum","_","modeCount","margin","width","getBoundingClientRect","height","svg","d3","select","append","attr","labels","index","x","scaleBand","domain","range","padding","call","axisBottom","tickSizeOuter","text","yLeft","scaleLinear","axisLeft","cognitiveVariances","t","yRight","Math","max","axisRight","color","scaleOrdinal","stackedData","stack","keys","selectAll","data","enter","d","key","i","bandwidth","min","style"],"mappings":"wnCAK4B,WAElBA,kBAAoBC,SAASC,eAAe,sBAC9CC,eAAiB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,YAC1DC,kBAAoBC,KAAKC,MAAMN,kBAAkBO,QAAQC,gBACzDC,eAAiB,CACnBN,eAAeO,QAAO,CAACC,IAAKC,QACxBD,IAAIC,MAAQ,EAAIT,eAAeU,OAAS,IACjCF,MACR,OACAP,kBAAkBU,KAAIC,aACfC,QAAUD,KAAI,wBACdE,oBAAsBC,OAAOC,QAAQH,SAEtCN,QAAO,CAACU,gBAAMC,EAAGC,uBAAeF,IAAME,YAAW,UAC/CnB,eAAeO,QAAO,CAACC,IAAKC,QAC/BD,IAAIC,MAAQI,QAAQJ,MAAQK,oBAAsB,IAC3CN,MACR,QAaLY,WAAe,GAAfA,aAA0B,GAA1BA,cAAsC,GAAtCA,YAAgD,GAClDC,MANgBvB,SAASC,eAAe,0BAA0BuB,wBAAwBD,MAMpED,YAAcA,aACpCG,OAAS,IAAMH,WAAaA,kBAG5BI,IAAMC,GAAGC,OAAO,2BACfC,OAAO,OACPC,KAAK,QAASP,MAAQD,YAAcA,cACpCQ,KAAK,SAAUL,OAASH,WAAaA,eACrCO,OAAO,KACPC,KAAK,YACF,aAAeR,YAAc,IAAMA,WAAa,WAIlDS,OAASvB,eAAeK,KAAI,CAACO,EAAGY,QAAoB,IAAVA,MAAc,kBAAaA,aAGvEC,EAAIN,GAAGO,YACNC,OAAOJ,QACPK,MAAM,CAAC,EAAGb,QACVc,QAAQ,CAAC,KACdX,IAAIG,OAAO,KACNC,KAAK,YAAa,eAAiBL,OAAS,KAC5Ca,KAAKX,GAAGY,WAAWN,GAAGO,cAAc,IAGzCd,IAAIG,OAAO,QACNC,KAAK,cAAe,OACpBA,KAAK,KAAMP,MAAQD,YAAcA,cAAgB,GACjDQ,KAAK,IAAKL,OAAyB,IAAhBH,eACnBQ,KAAK,YAAa,UAClBW,KAAK,aAGNC,MAAQf,GAAGgB,cACVR,OAAO,CAAC,EAAG,MACXC,MAAM,CAACX,OAAQ,IACpBC,IAAIG,OAAO,KACNS,KAAKX,GAAGiB,SAASF,QAGtBhB,IAAIG,OAAO,QACNC,KAAK,cAAe,UACpBA,KAAK,YAAa,eAClBA,KAAK,IAAoB,KAAdR,aACXQ,KAAK,KAAML,OAAS,GACpBK,KAAK,YAAa,UAClBW,KAAK,iCAGJI,mBAAqB,CACvB,KACG1C,kBAAkBU,KAAIiC,GAAKA,EAAC,0BAE/BC,OAASpB,GAAGgB,cACXR,OAAO,CAAC,EAAGa,KAAKC,IAAI,GAAID,KAAKC,OAAOJ,oBAAsB,KAC1DT,MAAM,CAACX,OAAQ,IACpBC,IAAIG,OAAO,KACNC,KAAK,gCAA0BP,eAC/Be,KAAKX,GAAGuB,UAAUH,SAGvBrB,IAAIG,OAAO,QACNC,KAAK,cAAe,UACpBA,KAAK,YAAa,eAClBA,KAAK,IAAKP,MAAsB,IAAdD,aAClBQ,KAAK,KAAML,OAAS,GACpBK,KAAK,YAAa,UAClBW,KAAK,oCAGNU,MAAQxB,GAAGyB,eACVjB,OAAOjC,gBACPkC,MAAM,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,YAGrFiB,YAAc1B,GAAG2B,QAAQC,KAAKrD,eAAhByB,CAAgCnB,gBAGlDkB,IAAIG,OAAO,KACN2B,UAAU,KAEVC,KAAKJ,aACLK,QAAQ7B,OAAO,KACfC,KAAK,QAAQ,SAAU6B,UACbR,MAAMQ,EAAEC,QAElBJ,UAAU,QAEVC,MAAK,SAAUE,UACLA,KAEVD,QACA7B,OAAO,QACPC,KAAK,KAAK,SAAU6B,EAAGE,UACb5B,EAAEF,OAAO8B,OAEnB/B,KAAK,KAAK,SAAU6B,UACVjB,MAAMiB,EAAE,OAElB7B,KAAK,UAAU,SAAU6B,UACfjB,MAAMiB,EAAE,IAAMjB,MAAMiB,EAAE,OAEhC7B,KAAK,QAASG,EAAE6B,aAErBpC,IAAIG,OAAO,KACN2B,UAAU,KAEVC,KAAKvD,gBACLwD,QACA7B,OAAO,QACPY,MAAK,SAAUkB,UACLA,KAEV7B,KAAK,cAAe,UACpBA,KAAK,oBAAqB,UAC1BA,KAAK,qBAAsB,UAC3BA,KAAK,KAAK,kBACAG,EAAEF,OAAO,IAAME,EAAE6B,YAAc,KAEzChC,KAAK,KAAK,SAAUV,EAAGyC,UACZnB,MAAMW,YAAYQ,GAAG,GAAG,IAAMnB,MAAMW,YAAYQ,GAAG,GAAG,KAAO,KAExE/B,KAAK,cAAe,QACpBA,KAAK,sBAAgBkB,KAAKe,IAAI9B,EAAE6B,YAAc,EAAG,WACjDhC,KAAK,OAAQ,SAElBJ,IAAIG,OAAO,KACN2B,UAAU,OAEVC,KAAKZ,oBACLa,QACA7B,OAAO,UACPC,KAAK,MAAM,SAAUV,EAAGyC,UACd5B,EAAEF,OAAO8B,IAAM5B,EAAE6B,YAAc,KAEzChC,KAAK,MAAM,SAAU6B,UACXZ,OAAOY,MAEjB7B,KAAK,IAAKkB,KAAKe,IAAI,EAAmB,IAAhB9B,EAAE6B,cACxBE,MAAM,OAAQ"}