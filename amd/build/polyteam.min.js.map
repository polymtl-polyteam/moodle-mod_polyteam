{"version":3,"file":"polyteam.min.js","sources":["../src/polyteam.js"],"sourcesContent":["import * as d3 from 'https://cdn.jsdelivr.net/npm/d3@7';\n\n// Create a stacked bar chart inspired from https://d3-graph-gallery.com/graph/barplot_stacked_basicWide.html\nexport const displayTeams = () => {\n\n    // Get generated teams data and internationalized strings\n    const dataDiv = document.getElementById('generatedteams');\n    const strings = JSON.parse(dataDiv.dataset.strings);\n    const generatedTeamsRaw = JSON.parse(dataDiv.dataset.generatedteams);\n    const allCognitiveModes = JSON.parse(dataDiv.dataset.allcognitivemodes);\n    const generatedTeams = [\n        allCognitiveModes.reduce((obj, mode) => {\n            obj[mode] = 1 / allCognitiveModes.length * 100;\n            return obj;\n        }, {}),\n        ...generatedTeamsRaw.map(team => {\n            const counter = team['cognitive_modes_counter'];\n            const cognitiveModesCount = Object.entries(counter)\n                /* eslint-disable-next-line no-unused-vars */\n                .reduce((sum, [_, modeCount]) => sum + modeCount, 0);\n            return allCognitiveModes.reduce((obj, mode) => {\n                if (cognitiveModesCount === 0) {\n                    obj[mode] = 0;\n                } else {\n                    obj[mode] = counter[mode] / cognitiveModesCount * 100;\n                }\n                return obj;\n            }, {});\n        })\n    ];\n\n    const matchingStrategies = ['ideal', ...new Set(generatedTeamsRaw.map(team => team['matching_strategy']))];\n\n    // Declare the chart dimensions and margins.\n    const parentWidth = document.getElementById('polyteamgeneratedteams').getBoundingClientRect().width;\n    const margin = {top: 50, right: 50, bottom: 50, left: 50},\n        width = parentWidth - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom;\n    // Append the svg object to the page and set the dimensions and margins of the graph\n    let svg = d3.select('#polyteamgeneratedteams')\n        .append('svg')\n        .attr('width', width + margin.left + margin.right)\n        .attr('height', height + margin.top + margin.bottom)\n        .append('g')\n        .attr('transform',\n            'translate(' + margin.left + ',' + margin.top + ')');\n\n    // Append legend items to SVG\n    const markersColors = d3.scaleOrdinal()\n        .domain(matchingStrategies)\n        // .range(['burlywood', 'black', 'chocolate']);\n        .range(d3.schemeDark2);\n    const legend = svg.selectAll('.legend')\n        .data(matchingStrategies)\n        .enter()\n        .append('g')\n        .attr('class', 'legend');\n    legend.append('rect')\n        .attr('x', 20)\n        .attr('y', 4)\n        .attr('width', 12)\n        .attr('height', 12)\n        .attr('fill', 'none')\n        .attr('stroke-width', 1.5)\n        .style('stroke', (d) => markersColors(d));\n    legend.append('text')\n        .attr('x', 40)\n        .attr('y', 10)\n        .attr('dy', '.35em')\n        .text((d) => strings[d])\n        .style('fill', (d) => markersColors(d));\n    // Calculate total width of all legend items\n    const legendItems = document.querySelectorAll('.legend');\n    let totalWidth = 0;\n    legendItems.forEach(function (item) {\n        totalWidth += item.getBBox().width;\n    });\n    const legendItemsPadding = 20;\n    // Adjust position of legend items\n    const startX = (width - totalWidth - legendItemsPadding * (matchingStrategies.length - 1)) / 2;\n    let previousWidth = 0;\n    legend.attr('transform', function (d, i) {\n        previousWidth += i === 0 ? 0 : legendItems[i - 1].getBBox().width;\n        const xPos = startX + previousWidth + (i * legendItemsPadding);\n        return 'translate(' + xPos + `, ${-margin.top * 0.75})`;\n    });\n\n    // Add X axis and labels\n    const labels = generatedTeams.map((_, index) => index === 0 ? strings['ideal'] : `${index}`);\n    const x = d3.scaleBand()\n        .domain(labels)\n        .range([0, width])\n        .padding([0.2]);\n    svg.append('g')\n        .attr('transform', 'translate(0,' + height + ')')\n        .call(d3.axisBottom(x).tickSizeOuter(0));\n    svg.append('text')\n        .attr('text-anchor', 'end')\n        .attr('x', (width + margin.left + margin.right) / 2)\n        .attr('y', height + margin.bottom * 0.75)\n        .attr('font-size', 'medium')\n        .text(strings['teams']);\n\n    // Add Y left axis (cognitive modes proportions) and labels\n    let yLeft = d3.scaleLinear()\n        .domain([0, 100])\n        .range([height, 0]);\n    svg.append('g')\n        .call(d3.axisLeft(yLeft));\n    svg.append('text')\n        .attr('text-anchor', 'middle')\n        .attr('transform', 'rotate(-90)')\n        .attr('y', -margin.left * 0.75)\n        .attr('x', -height / 2)\n        .attr('font-size', 'medium')\n        .text(strings['cognitivemodesproportions']);\n\n    // Add Y right axis and labels\n    const cognitiveVariances = [\n        0,\n        ...generatedTeamsRaw.map(t => t['cognitive_variance'])\n    ];\n    let yRight = d3.scaleLinear()\n        .domain([0, Math.max(12, Math.max(...cognitiveVariances) + 1)])\n        .range([height, 0]);\n    svg.append('g')\n        .attr('transform', `translate(${width}, 0)`)\n        .call(d3.axisRight(yRight));\n    svg.append('text')\n        .attr('text-anchor', 'middle')\n        .attr('transform', 'rotate(-90)')\n        .attr('y', width + margin.left * 0.75)\n        .attr('x', -height / 2)\n        .attr('font-size', 'medium')\n        .text(strings['standarddeviation']);\n\n    // Show the bars\n    // color palette = one color per subgroup\n    let color = d3.scaleOrdinal()\n        .domain(allCognitiveModes)\n        .range(['#1F77B4', '#FF7F0E', '#2CA02C', '#D62728', '#9467BD', '#8C564B', '#E377C2', '#7F7F7F']);\n    let stackedData = d3.stack().keys(allCognitiveModes)(generatedTeams);\n    svg.append('g')\n        .selectAll('g')\n        // Enter the stack data = loop key per key = group per group\n        .data(stackedData)\n        .enter().append('g')\n        .attr('fill', (d) => color(d.key))\n        .selectAll('rect')\n        // enter a second time = loop subgroup per subgroup to add all rectangles\n        .data(d => d)\n        .enter()\n        .append('rect')\n        .attr('x', (_, i) => x(labels[i]))\n        .attr('y', (d) => yLeft(d[1]))\n        .attr('height', (d) => yLeft(d[0]) - yLeft(d[1]))\n        .attr('width', x.bandwidth());\n    svg.append('g')\n        .selectAll('rect')\n        // Enter the stack data = loop key per key = group per group\n        .data(generatedTeams)\n        .enter()\n        .append('rect')\n        .attr('stroke', (_, i) => {\n            if (i === 0) {\n                return markersColors('ideal');\n            }\n            return markersColors(generatedTeamsRaw[i - 1]['matching_strategy']);\n        })\n        .attr('stroke-width', 1.5)\n        .attr('fill', 'none')\n        .attr('x', (_, i) => x(labels[i]))\n        .attr('y', yLeft(100))\n        .attr('height', yLeft(0) - yLeft(100))\n        .attr('width', x.bandwidth());\n    // Add text in middle of bars\n    svg.append('g')\n        .selectAll('g')\n        // Enter the stack data = loop key per key = group per group\n        .data(allCognitiveModes)\n        .enter()\n        .append('text')\n        .text(d => strings[d])\n        .attr('text-anchor', 'middle')\n        .attr('dominant-baseline', 'middle')\n        .attr('alignment-baseline', 'middle')\n        .attr('x', x(labels[0]) + x.bandwidth() / 2)\n        .attr('y', (_, i) => (yLeft(stackedData[i][0][0]) + yLeft(stackedData[i][0][1])) / 2)\n        .attr('font-weight', 'bold')\n        .attr('font-size', `${Math.min(x.bandwidth() / 2, 35)}px`)\n        .attr('fill', 'white');\n    svg.append('g')\n        .selectAll('rect')\n        // Enter the stack data = loop key per key = group per group\n        .data(generatedTeams.map((data, index) => ({data, index})))\n        .enter()\n        .filter(({data}, i) => {\n            return i > 0 && Object.values(data).every(v => v === 0);\n        })\n        .append('text')\n        .text(strings['nocognitivemodedata'])\n        .attr('transform', 'rotate(90)')\n        .attr('text-anchor', 'middle')\n        .attr('dominant-baseline', 'middle')\n        // .attr('alignment-baseline', 'middle')\n        .attr('x', ({index}) => x(labels[index]) + x.bandwidth() / 2)\n        .attr('y', (yLeft(0) + yLeft(100)) / 2)\n        .attr('font-size', 'small')\n        .attr('fill', 'black')\n        .style(\"opacity\", 0.5)\n        .each(function () {\n            const bbox = this.getBBox();\n            const cx = bbox.x + bbox.width / 2;\n            const cy = bbox.y + bbox.height / 2;\n            d3.select(this)\n                .attr(\"transform\", \"rotate(-90,\" + cx + \",\" + cy + \")\");\n        });\n\n    // Add markers\n    svg.append('g')\n        .selectAll('dot')\n        // Enter the stack data = loop key per key = group per group\n        .data(cognitiveVariances.map((d, i) => ({\"index\": i, \"data\": d})))\n        .enter()\n        .filter((_, i) => i === 0 || generatedTeamsRaw[i - 1]['matching_strategy'] !== 'randommatchingwithnocognitivemode')\n        .append('circle')\n        .attr('cx', (d) => x(labels[d['index']]) + x.bandwidth() / 2)\n        .attr('cy', d => yRight(d[\"data\"]))\n        .attr('r', Math.min(5, x.bandwidth() * 0.45))\n        .style('fill', 'black');\n\n};\n"],"names":["dataDiv","document","getElementById","strings","JSON","parse","dataset","generatedTeamsRaw","generatedteams","allCognitiveModes","allcognitivemodes","generatedTeams","reduce","obj","mode","length","map","team","counter","cognitiveModesCount","Object","entries","sum","_","modeCount","matchingStrategies","Set","parentWidth","getBoundingClientRect","width","margin","height","svg","d3","select","append","attr","markersColors","scaleOrdinal","domain","range","schemeDark2","legend","selectAll","data","enter","style","d","text","legendItems","querySelectorAll","totalWidth","forEach","item","getBBox","startX","previousWidth","i","labels","index","x","scaleBand","padding","call","axisBottom","tickSizeOuter","yLeft","scaleLinear","axisLeft","cognitiveVariances","t","yRight","Math","max","axisRight","color","stackedData","stack","keys","key","bandwidth","min","filter","values","every","v","_ref3","each","bbox","this","cx","cy","y"],"mappings":"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"}