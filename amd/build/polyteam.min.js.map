{"version":3,"file":"polyteam.min.js","sources":["../src/polyteam.js"],"sourcesContent":["import * as d3 from \"https://cdn.jsdelivr.net/npm/d3@7\";\n\n// Create a stacked bar chart inspired from https://d3-graph-gallery.com/graph/barplot_stacked_basicWide.html\nexport const displayTeams = () => {\n\n    // Get generated teams data and internationalized strings\n    const dataDiv = document.getElementById(\"generatedteams\");\n    const strings = JSON.parse(dataDiv.dataset.strings);\n    const generatedTeamsRaw = JSON.parse(dataDiv.dataset.generatedteams);\n    let allCognitiveModes = [\"EF\", \"EN\", \"ES\", \"ET\", \"IF\", \"IN\", \"IS\", \"IT\"];\n    const generatedTeams = [\n        allCognitiveModes.reduce((obj, mode) => {\n            obj[mode] = 1 / allCognitiveModes.length * 100;\n            return obj;\n        }, {}),\n        ...generatedTeamsRaw.map(team => {\n            const counter = team['cognitive_modes_counter'];\n            const cognitiveModesCount = Object.entries(counter)\n                /* eslint-disable-next-line no-unused-vars */\n                .reduce((sum, [_, modeCount]) => sum + modeCount, 0);\n            return allCognitiveModes.reduce((obj, mode) => {\n                obj[mode] = counter[mode] / cognitiveModesCount * 100;\n                return obj;\n            }, {});\n        })\n    ];\n\n    const matchingStrategies = ['ideal', ...new Set(generatedTeamsRaw.map(team => team['matching_strategy']))];\n\n    // Declare the chart dimensions and margins.\n    const parentWidth = document.getElementById(\"polyteamgeneratedteams\").getBoundingClientRect().width;\n    const margin = {top: 20, right: 50, bottom: 50, left: 50},\n        width = parentWidth - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom;\n    // Append the svg object to the page and set the dimensions and margins of the graph\n    let svg = d3.select(\"#polyteamgeneratedteams\")\n        .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\",\n            \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n    // Append legend items to SVG\n    const markersColors = d3.scaleOrdinal()\n        .domain(matchingStrategies)\n        .range([\"burlywood\", \"black\", \"chocolate\"]);\n    const legend = svg.selectAll(\".legend\")\n        .data(matchingStrategies)\n        .enter()\n        .append(\"g\")\n        .attr(\"class\", \"legend\");\n    legend.append(\"circle\")\n        .attr(\"cx\", 20)\n        .attr(\"cy\", 10)\n        .attr(\"r\", 6)\n        .style(\"fill\", (d) => markersColors(d));\n    legend.append(\"text\")\n        .attr(\"x\", 40)\n        .attr(\"y\", 10)\n        .attr(\"dy\", \".35em\")\n        .text((d) => strings[d])\n        .style(\"fill\", (d) => markersColors(d));\n    // Calculate total width of all legend items\n    const legendItems = document.querySelectorAll(\".legend\");\n    let totalWidth = 0;\n    legendItems.forEach(function (item) {\n        totalWidth += item.getBBox().width;\n    });\n    const legendItemsPadding = 40;\n    // Adjust position of legend items\n    const startX = (width - totalWidth - legendItemsPadding * (matchingStrategies.length - 1)) / 2;\n    let previousWidth = 0;\n    legend.attr(\"transform\", function (d, i) {\n        previousWidth += i === 0 ? 0 : legendItems[i - 1].getBBox().width;\n        const xPos = startX + previousWidth + (i * legendItemsPadding);\n        return \"translate(\" + xPos + `, ${-margin.top})`;\n    });\n\n    // Add X axis and labels\n    const labels = generatedTeams.map((_, index) => index === 0 ? strings[\"ideal\"] : `${index}`);\n    const x = d3.scaleBand()\n        .domain(labels)\n        .range([0, width])\n        .padding([0.2]);\n    svg.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x).tickSizeOuter(0));\n    svg.append(\"text\")\n        .attr(\"text-anchor\", \"end\")\n        .attr(\"x\", (width + margin.left + margin.right) / 2)\n        .attr(\"y\", height + margin.bottom * 0.75)\n        .attr(\"font-size\", \"medium\")\n        .text(strings['teams']);\n\n    // Add Y left axis (cognitive modes proportions) and labels\n    let yLeft = d3.scaleLinear()\n        .domain([0, 100])\n        .range([height, 0]);\n    svg.append(\"g\")\n        .call(d3.axisLeft(yLeft));\n    svg.append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", -margin.left * 0.75)\n        .attr(\"x\", -height / 2)\n        .attr(\"font-size\", \"medium\")\n        .text(strings['cognitivemodesproportions']);\n\n    // Add Y right axis and labels\n    const cognitiveVariances = [\n        0,\n        ...generatedTeamsRaw.map(t => t[\"cognitive_variance\"])\n    ];\n    let yRight = d3.scaleLinear()\n        .domain([0, Math.max(12, Math.max(...cognitiveVariances) + 1)])\n        .range([height, 0]);\n    svg.append(\"g\")\n        .attr(\"transform\", `translate(${width}, 0)`)\n        .call(d3.axisRight(yRight));\n    svg.append(\"text\")\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"transform\", \"rotate(-90)\")\n        .attr(\"y\", width + margin.left * 0.75)\n        .attr(\"x\", -height / 2)\n        .attr(\"font-size\", \"medium\")\n        .text(strings['standarddeviation']);\n\n    // Show the bars\n    // color palette = one color per subgroup\n    let color = d3.scaleOrdinal()\n        .domain(allCognitiveModes)\n        .range(['#1F77B4', '#FF7F0E', '#2CA02C', '#D62728', '#9467BD', '#8C564B', '#E377C2', '#7F7F7F']);\n    let stackedData = d3.stack().keys(allCognitiveModes)(generatedTeams);\n    svg.append(\"g\")\n        .selectAll(\"g\")\n        // Enter the stack data = loop key per key = group per group\n        .data(stackedData)\n        .enter().append(\"g\")\n        .attr(\"fill\", function (d) {\n            return color(d.key);\n        })\n        .selectAll(\"rect\")\n        // enter a second time = loop subgroup per subgroup to add all rectangles\n        .data(function (d) {\n            return d;\n        })\n        .enter()\n        .append(\"rect\")\n        .attr(\"x\", function (d, i) {\n            return x(labels[i]);\n        })\n        .attr(\"y\", function (d) {\n            return yLeft(d[1]);\n        })\n        .attr(\"height\", function (d) {\n            return yLeft(d[0]) - yLeft(d[1]);\n        })\n        .attr(\"width\", x.bandwidth());\n\n    svg.append(\"g\")\n        .selectAll(\"g\")\n        // Enter the stack data = loop key per key = group per group\n        .data(allCognitiveModes)\n        .enter()\n        .append(\"text\")\n        .text(function (d) {\n            return d;\n        })\n        .attr(\"text-anchor\", \"middle\")\n        .attr(\"dominant-baseline\", \"middle\")\n        .attr(\"alignment-baseline\", \"middle\")\n        .attr(\"x\", function () {\n            return x(labels[0]) + x.bandwidth() / 2;\n        })\n        .attr(\"y\", function (_, i) {\n            return (yLeft(stackedData[i][0][0]) + yLeft(stackedData[i][0][1])) / 2;\n        })\n        .attr(\"font-weight\", \"bold\")\n        .attr(\"font-size\", `${Math.min(x.bandwidth() / 2, 35)}px`)\n        .attr(\"fill\", \"white\");\n\n    // Add markers\n    svg.append(\"g\")\n        .selectAll(\"dot\")\n        // Enter the stack data = loop key per key = group per group\n        .data(cognitiveVariances)\n        .enter()\n        .append(\"circle\")\n        .attr(\"cx\", function (_, i) {\n            return x(labels[i]) + x.bandwidth() / 2;\n        })\n        .attr(\"cy\", function (d) {\n            return yRight(d);\n        })\n        .attr(\"r\", Math.min(5, x.bandwidth() * 0.45))\n        .style(\"fill\", (_, i) => {\n            if (i === 0) {\n                return markersColors(\"ideal\");\n            }\n            return markersColors(generatedTeamsRaw[i - 1][\"matching_strategy\"]);\n        });\n\n};\n"],"names":["dataDiv","document","getElementById","strings","JSON","parse","dataset","generatedTeamsRaw","generatedteams","allCognitiveModes","generatedTeams","reduce","obj","mode","length","map","team","counter","cognitiveModesCount","Object","entries","sum","_","modeCount","matchingStrategies","Set","parentWidth","getBoundingClientRect","width","margin","height","svg","d3","select","append","attr","markersColors","scaleOrdinal","domain","range","legend","selectAll","data","enter","style","d","text","legendItems","querySelectorAll","totalWidth","forEach","item","getBBox","startX","previousWidth","i","labels","index","x","scaleBand","padding","call","axisBottom","tickSizeOuter","yLeft","scaleLinear","axisLeft","cognitiveVariances","t","yRight","Math","max","axisRight","color","stackedData","stack","keys","key","bandwidth","min"],"mappings":"wnCAG4B,WAGlBA,QAAUC,SAASC,eAAe,kBAClCC,QAAUC,KAAKC,MAAML,QAAQM,QAAQH,SACrCI,kBAAoBH,KAAKC,MAAML,QAAQM,QAAQE,oBACjDC,kBAAoB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,YAC7DC,eAAiB,CACnBD,kBAAkBE,QAAO,CAACC,IAAKC,QAC3BD,IAAIC,MAAQ,EAAIJ,kBAAkBK,OAAS,IACpCF,MACR,OACAL,kBAAkBQ,KAAIC,aACfC,QAAUD,KAAI,wBACdE,oBAAsBC,OAAOC,QAAQH,SAEtCN,QAAO,CAACU,gBAAMC,EAAGC,uBAAeF,IAAME,YAAW,UAC/Cd,kBAAkBE,QAAO,CAACC,IAAKC,QAClCD,IAAIC,MAAQI,QAAQJ,MAAQK,oBAAsB,IAC3CN,MACR,QAILY,mBAAqB,CAAC,WAAY,IAAIC,IAAIlB,kBAAkBQ,KAAIC,MAAQA,KAAI,sBAG5EU,YAAczB,SAASC,eAAe,0BAA0ByB,wBAAwBC,MACxFC,WAAe,GAAfA,aAA0B,GAA1BA,cAAsC,GAAtCA,YAAgD,GAClDD,MAAQF,YAAcG,YAAcA,aACpCC,OAAS,IAAMD,WAAaA,kBAE5BE,IAAMC,GAAGC,OAAO,2BACfC,OAAO,OACPC,KAAK,QAASP,MAAQC,YAAcA,cACpCM,KAAK,SAAUL,OAASD,WAAaA,eACrCK,OAAO,KACPC,KAAK,YACF,aAAeN,YAAc,IAAMA,WAAa,WAGlDO,cAAgBJ,GAAGK,eACpBC,OAAOd,oBACPe,MAAM,CAAC,YAAa,QAAS,cAC5BC,OAAST,IAAIU,UAAU,WACxBC,KAAKlB,oBACLmB,QACAT,OAAO,KACPC,KAAK,QAAS,UACnBK,OAAON,OAAO,UACTC,KAAK,KAAM,IACXA,KAAK,KAAM,IACXA,KAAK,IAAK,GACVS,MAAM,QAASC,GAAMT,cAAcS,KACxCL,OAAON,OAAO,QACTC,KAAK,IAAK,IACVA,KAAK,IAAK,IACVA,KAAK,KAAM,SACXW,MAAMD,GAAM1C,QAAQ0C,KACpBD,MAAM,QAASC,GAAMT,cAAcS,WAElCE,YAAc9C,SAAS+C,iBAAiB,eAC1CC,WAAa,EACjBF,YAAYG,SAAQ,SAAUC,MAC1BF,YAAcE,KAAKC,UAAUxB,eAI3ByB,QAAUzB,MAAQqB,WAFG,IAEgCzB,mBAAmBV,OAAS,IAAM,MACzFwC,cAAgB,EACpBd,OAAOL,KAAK,aAAa,SAAUU,EAAGU,GAClCD,eAAuB,IAANC,EAAU,EAAIR,YAAYQ,EAAI,GAAGH,UAAUxB,YAErD,cADMyB,OAASC,cANC,GAMgBC,gBACJ1B,yBAIjC2B,OAAS9C,eAAeK,KAAI,CAACO,EAAGmC,QAAoB,IAAVA,MAActD,QAAO,gBAAesD,SAC9EC,EAAI1B,GAAG2B,YACRrB,OAAOkB,QACPjB,MAAM,CAAC,EAAGX,QACVgC,QAAQ,CAAC,KACd7B,IAAIG,OAAO,KACNC,KAAK,YAAa,eAAiBL,OAAS,KAC5C+B,KAAK7B,GAAG8B,WAAWJ,GAAGK,cAAc,IACzChC,IAAIG,OAAO,QACNC,KAAK,cAAe,OACpBA,KAAK,KAAMP,MAAQC,YAAcA,cAAgB,GACjDM,KAAK,IAAKL,OAAyB,IAAhBD,eACnBM,KAAK,YAAa,UAClBW,KAAK3C,QAAO,WAGb6D,MAAQhC,GAAGiC,cACV3B,OAAO,CAAC,EAAG,MACXC,MAAM,CAACT,OAAQ,IACpBC,IAAIG,OAAO,KACN2B,KAAK7B,GAAGkC,SAASF,QACtBjC,IAAIG,OAAO,QACNC,KAAK,cAAe,UACpBA,KAAK,YAAa,eAClBA,KAAK,IAAoB,KAAdN,aACXM,KAAK,KAAML,OAAS,GACpBK,KAAK,YAAa,UAClBW,KAAK3C,QAAO,iCAGXgE,mBAAqB,CACvB,KACG5D,kBAAkBQ,KAAIqD,GAAKA,EAAC,0BAE/BC,OAASrC,GAAGiC,cACX3B,OAAO,CAAC,EAAGgC,KAAKC,IAAI,GAAID,KAAKC,OAAOJ,oBAAsB,KAC1D5B,MAAM,CAACT,OAAQ,IACpBC,IAAIG,OAAO,KACNC,KAAK,gCAA0BP,eAC/BiC,KAAK7B,GAAGwC,UAAUH,SACvBtC,IAAIG,OAAO,QACNC,KAAK,cAAe,UACpBA,KAAK,YAAa,eAClBA,KAAK,IAAKP,MAAsB,IAAdC,aAClBM,KAAK,KAAML,OAAS,GACpBK,KAAK,YAAa,UAClBW,KAAK3C,QAAO,uBAIbsE,MAAQzC,GAAGK,eACVC,OAAO7B,mBACP8B,MAAM,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,YACrFmC,YAAc1C,GAAG2C,QAAQC,KAAKnE,kBAAhBuB,CAAmCtB,gBACrDqB,IAAIG,OAAO,KACNO,UAAU,KAEVC,KAAKgC,aACL/B,QAAQT,OAAO,KACfC,KAAK,QAAQ,SAAUU,UACb4B,MAAM5B,EAAEgC,QAElBpC,UAAU,QAEVC,MAAK,SAAUG,UACLA,KAEVF,QACAT,OAAO,QACPC,KAAK,KAAK,SAAUU,EAAGU,UACbG,EAAEF,OAAOD,OAEnBpB,KAAK,KAAK,SAAUU,UACVmB,MAAMnB,EAAE,OAElBV,KAAK,UAAU,SAAUU,UACfmB,MAAMnB,EAAE,IAAMmB,MAAMnB,EAAE,OAEhCV,KAAK,QAASuB,EAAEoB,aAErB/C,IAAIG,OAAO,KACNO,UAAU,KAEVC,KAAKjC,mBACLkC,QACAT,OAAO,QACPY,MAAK,SAAUD,UACLA,KAEVV,KAAK,cAAe,UACpBA,KAAK,oBAAqB,UAC1BA,KAAK,qBAAsB,UAC3BA,KAAK,KAAK,kBACAuB,EAAEF,OAAO,IAAME,EAAEoB,YAAc,KAEzC3C,KAAK,KAAK,SAAUb,EAAGiC,UACZS,MAAMU,YAAYnB,GAAG,GAAG,IAAMS,MAAMU,YAAYnB,GAAG,GAAG,KAAO,KAExEpB,KAAK,cAAe,QACpBA,KAAK,sBAAgBmC,KAAKS,IAAIrB,EAAEoB,YAAc,EAAG,WACjD3C,KAAK,OAAQ,SAGlBJ,IAAIG,OAAO,KACNO,UAAU,OAEVC,KAAKyB,oBACLxB,QACAT,OAAO,UACPC,KAAK,MAAM,SAAUb,EAAGiC,UACdG,EAAEF,OAAOD,IAAMG,EAAEoB,YAAc,KAEzC3C,KAAK,MAAM,SAAUU,UACXwB,OAAOxB,MAEjBV,KAAK,IAAKmC,KAAKS,IAAI,EAAmB,IAAhBrB,EAAEoB,cACxBlC,MAAM,QAAQ,CAACtB,EAAGiC,IAEJnB,cADD,IAANmB,EACqB,QAEJhD,kBAAkBgD,EAAI,GAAtB"}